File Upload Vulnerability in the SecureBank
 User Notes Feature
 This document details a File upload vulnerability found in the SecureBank
 application's user notes feature and the subsequent steps taken to patch it.
 Vulnerability Description
 Vulnerability Type:File Upload vulnerability
 Location: 
dashboard.php, secure_backend.php, insecure_backend.php 
 Description: The file upload feature was vulnerable to a file upload attack because it failed to sanitize file extensions, specifically .php,.svg and other files that could contain malicious code.
 The file upload feature also failed to check the files themselves for code. This vulneraqbility could allow malicious users to upload a makeshift webshell to the /uploads folder, potentially compromising the hosts entire system 
 Vulnerable Code Snippet:
 <?php
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['id-upload'])) {
    $uploadDir = 'uploads/'; 
    $fileTmpPath = $_FILES['id-upload']['tmp_name'];
    $fileName = basename($_FILES['id-upload']['name']);
    $fileExtension = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));

    // Only allow certain image types
    
        $safeFileName = uniqid('id_', true) . '.' . $fileExtension;
        $destination = $uploadDir . $safeFileName;

        if (move_uploaded_file($fileTmpPath, $destination)) {
            // Redirect back with success and filename
            header("Location: dashboard.php?status=success&image=" . urlencode($safeFileName));
            exit();
        
    }
}


header("Location: dashboard.php?status=fail");
exit();
?>

 The code is a demonstration of a backend with no file security features. Since the backend does not test the file extension to see if the file can execute code, a user could upload an svg file with malicious javascript code or a php file with a malicious payload.   
 Exploitation Scenario:
 An attacker could either manually code a web shell or get one off the web. A good example is found at https://github.com/Arrexel/phpbash/blob/master/phpbash.php.
The attacker can store the shell in a .php file and then upload it to the site. This could allow the attacker to gain access to the host system, perform linux or windows priviledge escalation, find files with passwords on the hosts system and more. 
An attacker could also further upload an svg or jpg file with malicious javascript code, which has the same consequences as an xss attack. 
Patched Code Location: secure_backend.php/dashboard.php
 Patching Method:Blacklisting and whitelisting restricted file extensions (including files that have php in the middle of the file extension in case a user uploads a file called file.php.jpg) and code used in xss/sql injection attacks(a user could upload a file named <script>alert(1);</script>.jpg)
 Searching for code in the files including blacklisting symbols, keywords and tags associated with html, javascript, and command prompts. 
 Patched Code Snippet:
 <?php
function checkExifData($filePath) {
    if (function_exists('exif_read_data')) {
        $exif = @exif_read_data($filePath, null, true);
        if ($exif) {
            foreach ($exif as $section) {
                foreach ($section as $value) {
                    if (is_string($value) && preg_match('/<\?(php|=)/i', $value)) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}
function scanMetadataForJSorHTML($filePath) {
    $exif = @exif_read_data($filePath, null, true);

    if (!$exif) {
        return false;
    }

    foreach ($exif as $section => $data) {
        foreach ($data as $key => $val) {
            if (preg_match('/<script|<\/script>|eval\s*\(|javascript:|<iframe|<img|onerror=|onload=/i', $val)) {
                return true;
            }
        }
    }

    return false;
}


function hasEmbeddedCode($filePath) {
    $content = file_get_contents($filePath);
    $patterns = [
        '/<\?php/i',
        '/<\?/i',
        '/eval\s*\(/i',
        '/base64_decode\s*\(/i',
        '/system\s*\(/i',
        '/shell_exec\s*\(/i',
        '/passthru\s*\(/i'
    ];

    foreach ($patterns as $pattern) {
        if (preg_match($pattern, $content)) {
            return true;
        }
    }
    return false;
}
function hasembeddedimagetag ($filePath) {
    $content = file_get_contents($filePath);
    $pattern = '/<img.*?src=["\']data:image\/.*?["\'].*?>/is';
    return preg_match($pattern, $content);
}
function hasEmbeddedJS($filePath) {
    $content = file_get_contents($filePath);

    $patterns = [
        '/<script.*?>/is',           
        '/javascript:/i',           
        '/eval\s*\(/i',              
        '/new\s+Function\s*\(/i',    
        '/document\.write\s*\(/i',   
        '/window\.location/i',       
        '/<iframe.*?>/is',           
    ];

    foreach ($patterns as $pattern) {
        if (preg_match($pattern, $content)) {
            return true;
        }
    }

    return false;
}
function hasEmbeddedCSS($filePath) {
    $content = file_get_contents($filePath);

    $patterns = [
        '/<style.*?>/is',            
        '/@import\s*["\'].*?["\']/i', 
        '/url\s*\(/i',               
        '/expression\s*\(/i',        
        '/filter:\s*progid:/i'       
    ];

    foreach ($patterns as $pattern) {
        if (preg_match($pattern, $content)) {
            return true;
        }
    }

    return false;
}
$targetDir = __DIR__ . "/uploads/";
if (!is_dir($targetDir)) {
    mkdir($targetDir, 0755, true);
}

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['id-upload'])) {
    $file = $_FILES['id-upload'];

    if ($file['error'] !== UPLOAD_ERR_OK) {
        http_response_code(400);
        echo "Upload failed. Error code: " . $file['error'];
        exit;
    }

    $finfo = new finfo(FILEINFO_MIME_TYPE);
    $uploaded_file_name = strtolower(basename($file['name']));
    $char_blacklist = ["'", '"', '\\', '/', '<', '>', '&', '`', '*', '?', '|', '^', '%', '!', '@', '#', '$', '(', ')', '{', '}', '[', ']', ':', ';', '=', '+', '-', '_'];
    $char_wordblacklist = ['translate', 'select', 'insert', 'update', 'delete', 'drop', 'alter', 'create', 'exec', 'execute', 'call', 'grant', 'revoke', 'truncate', 'replace', 'show', 'use', 'set', 'declare', 'begin', 'end', 'if', 'while', 'for', 'case', 'when', 'then', 'else', 'loop', 'return', 'goto', 'continue', 'break'];

    if (preg_match('/\.p(hp|html?|har|hps|hp[3-9]|gif|hpt)$/i', $uploaded_file_name)) {
        http_response_code(400);
        echo "Invalid file extension.";
        exit;
    }

    // Only allow specific image types
    if (!preg_match('/\.(jpeg|jpg|png|gif)$/i', $uploaded_file_name)) {
        http_response_code(400);
        echo "Invalid image format.";
        exit;
    }

    foreach ($char_blacklist as $char) {
        if (strpos($uploaded_file_name, $char) !== false) {
            http_response_code(400);
            echo "Invalid characters in file name.";
            exit;
        }
    }

    foreach ($char_wordblacklist as $word) {
        if (strpos($uploaded_file_name, $word) !== false) {
            http_response_code(400);
            echo "Suspicious word found in file name.";
            exit;
        }
    }

    if (hasEmbeddedCode($file['tmp_name'])) {
        http_response_code(400);
        echo "File contains embedded code.";
        exit;
    }

    if (hasEmbeddedJS($file['tmp_name'])) {
        http_response_code(400);
        echo "File contains embedded JavaScript.";
        exit;
    }
    if (hasEmbeddedCSS($file['tmp_name'])) {
        http_response_code(400);
        echo "File contains embedded CSS.";
        exit;
    }
    if (checkExifData($file['tmp_name'])) {
        http_response_code(400);
        echo "File contains code in EXIF data.";
        exit;
    }
    if (hasembeddedimagetag($file['tmp_name'])) {
        http_response_code(400);
        echo "File contains embedded image tag.";
        exit;
    }
    if (scanMetadataForJSorHTML($file['tmp_name'])) {
        http_response_code(400);
        echo "File contains JavaScript or HTML in metadata.";
        exit;
    }
    $ext = pathinfo($uploaded_file_name, PATHINFO_EXTENSION);
    $fileName = 'id_' . date('Ymd_His') . '_' . bin2hex(random_bytes(5)) . "." . $ext;
    $destination = $targetDir . $fileName;

    if (move_uploaded_file($file['tmp_name'], $destination)) {
        echo "Upload successful.";
    } else {
        http_response_code(500);
        echo "Failed to save file.";
    }
} else {
    http_response_code(400);
    echo "No file uploaded.";
}
?>
By blacklisting extensions and characters in the filename it makes it so that the user can only download specified file types that do not contain malicious code
 Importance of Patching
 Security: File uploads are among the most severe vulnerabilities a website could have, and could lead to lateral movement on the hosts server, site defacement, data leaks, and more
 User Trust: Addressing safety ensures that users continue to trust putting sensative data on your website
 Best Practices: sanitizing both the filename and the file content using blacklists,whitelists and even client side sanitization and type lists is paramount to preventing severe vulnerabilities. 
